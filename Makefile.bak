BUILD_DIR = build

# If COMPARE is set to 1, check the output md5sum after building
COMPARE ?= 1

# OS detection
ifeq ($(OS),Windows_NT)
    DETECTED_OS=windows
else
    UNAME_S := $(shell uname -s)
    ifeq ($(UNAME_S),Linux)
        DETECTED_OS=linux
    endif
endif

# Not sure if this is needed, but I saw other repositories do this
IRIX_ROOT := tools/ido7.1_compiler
CC := tools/ido_recomp/$(DETECTED_OS)/7.1/cc

# Find cross compiler
ifeq ($(shell type mips-linux-gnu-ld >/dev/null 2>/dev/null; echo $$?), 0)
  CROSS := mips-linux-gnu-
else ifeq ($(shell type mips64-linux-gnu-ld >/dev/null 2>/dev/null; echo $$?), 0)
  CROSS := mips64-linux-gnu-
else
  CROSS := mips64-elf-
endif

# Tools
MAKE := make
GCC := $(CROSS)gcc
AS := $(CROSS)as
LD := $(CROSS)ld
OBJCOPY := $(CROSS)objcopy
PYTHON3 := python3
N64CRC = tools/n64crc

# Flags
IFLAGS = -Iinclude
LDFLAGS = -T undefined_syms_auto.txt -T undefined_funcs_auto.txt -T undefined_funcs.txt  -T $(LDSCRIPT) -Map $(BUILD_DIR)/mischiefmakers.map
OPTFLAGS = -O2
CFLAGS = -Wab,-r4300_mul -non_shared -G 0 -Xcpluscomm -Xfullwarn $(OPTFLAGS) -signed -I include -I src -I libreultra/include/2.0I -D_LANGUAGE_C -mips2 -32
ASFLAGS = -mtune=vr4300 -march=vr4300 --no-pad-sections -mabi=32 -mips3 $(IFLAGS)

# Directories
ASSET_DIRS := assets
ASM_DIRS := $(shell find asm -type d -not -path "asm/non_matchings*")
SRC_DIRS := src

# Files
ASSET_FILES := $(foreach dir,$(ASSET_DIRS),$(wildcard $(dir)/*.bin))
C_FILES := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.c))
S_FILES := $(foreach dir,$(ASM_DIRS),$(wildcard $(dir)/*.s))

# Object files
O_FILES := $(foreach file,$(C_FILES),$(BUILD_DIR)/$(file:.c=.o)) \
           $(foreach file,$(S_FILES),$(BUILD_DIR)/$(file:.s=.o)) \
		   $(foreach file,$(ASSET_FILES),$(BUILD_DIR)/$(file:.bin=.o))

# Output
TARGET = mischiefmakers
ELF := $(BUILD_DIR)/$(TARGET).elf
ROM := $(BUILD_DIR)/$(TARGET).z64
LDSCRIPT = $(TARGET).ld

$(foreach dir,$(SRC_DIRS) $(ASM_DIRS) $(ASSET_DIR),$(shell mkdir -p build/$(dir)))

# Rules
default: all

all: $(ROM)
ifeq ($(COMPARE),1)
	@md5sum $(ROM)
	@md5sum -c checksum.md5
endif

setup:
	make -C tools -j
	$(PYTHON3) tools/splat/split.py --target baserom.z64 --basedir . mischiefmakers.yaml
#	$(PYTHON3) tools/splat/create_config.py baserom.z64
#	mv None.ld mischiefmakers.ld

# Compile C files
$(BUILD_DIR)/%.o: %.c
	@echo Compiling $<
	$(CC) -c $(CFLAGS) -o $@ $<
	$(PYTHON3) tools/asm-processor/asm_processor.py --assembler $(AS) -O2 --asm-prelude prelude.s --post-process $@ $<

# Assemble Assembly files
$(BUILD_DIR)/%.o: %.s
	@echo Assembling $<
	$(AS) $(ASFLAGS) $< -o $@

# Link binary files
$(BUILD_DIR)/%.o: %.bin
	@echo Linking $<
	$(LD) -r -b binary -o $@ $<

# Link
$(ELF): $(O_FILES) $(LD_SCRIPT)
	@echo Linking $<
	$(LD) $(LDFLAGS) -o $@ $<

# Final output
$(ROM): $(ELF)
	$(OBJCOPY) $< $@ -O binary
	$(N64CRC) $@

clean:
	rm -rf $(BUILD_DIR)

nuke:
	make -C tools -j clean
	rm -rf mischiefmakers.yaml undefined_funcs_auto.txt undefined_syms_auto.txt
	rm -rf $(ASM_DIRS) $(ASSET_DIRS) $(BUILD_DIR)

